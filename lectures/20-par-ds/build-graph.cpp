/**
 * Transforms a graph from an unsorted list of edges to an adjacency list format in parallel
 */


#include "nmmintrin.h" // for SSE4.2
#include "immintrin.h" // for AVX
#include <chrono>      // timing library
#include <iostream>

#include <vector>

namespace { // anonymous

using vertex = uint32_t;

struct edge
{
    vertex u;
    vertex v;
};

#include "edges.hpp" // statically generated vector of edge structs

size_t to_adjacency_list()
{
    return edges.size();
}

} // namespace anonymous

int main()
{
    auto sum = 0.0;
    auto const num_trials = 20000u;

    auto const start_time = std::chrono::system_clock::now();

    for( auto i = 0u; i < num_trials; ++i )
    {
        sum += to_adjacency_list();
    }

    auto const end_time = std::chrono::system_clock::now();
    auto const elapsed_time = std::chrono::duration_cast<std::chrono::microseconds>( end_time - start_time );

    std::cout << "answer: " << ( sum  / static_cast< float >( num_trials ) ) << std::endl;
    std::cout << "time: " << ( elapsed_time.count() / static_cast< float >( num_trials ) ) << " us" << std::endl;
    return 0;
}
