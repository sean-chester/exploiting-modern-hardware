/**
 * Calculates the average size of set of 3d vectors.
 * Example input: {{1,1,1},{2,2,2}}
 * I.e., 1 vector of size (3*1^2)^-0.5 and 1 vector of size (3*2^2)^0.5
 * Example output: ( sqrt(3) + sqrt(12) ) / 2 = 2.59808
 */


#include "nmmintrin.h" // for SSE4.2
#include "immintrin.h" // for AVX
#include "math.h" 	   // sqrtf()
#include <chrono>      // timing library
#include <iostream>

#include <vector>

struct direction
{
	float x;
	float y;
	float z;
};

#include "3d-vectors.hpp"

float average_vector_length()
{
	auto total = 0.0f;
	auto const n = dirs.size();

	for( auto i = 0lu; i < n; ++i )
	{
		union { __m128 sum4; float sum[4]; };
		sum4 = _mm_setr_ps( dirs[ i ].x, dirs[ i ].y, dirs[ i ].z, dirs[ i + 1].x );
		sum4 = _mm_mul_ps( sum4, sum4 );

		total += sqrtf( sum4[ 0 ] + sum4[ 1 ] + sum4[ 2 ] );
	}

	return total / n;
}

int main()
{
    auto sum = 0.0f;
    auto const num_trials = 20000u;

    auto const start_time = std::chrono::system_clock::now();

    for( auto i = 0u; i < num_trials; ++i )
    {
        // Just add up results so that something is done with the output
        sum += average_vector_length();
    }

    auto const end_time = std::chrono::system_clock::now();
    auto const elapsed_time = std::chrono::duration_cast<std::chrono::microseconds>( end_time - start_time );

    std::cout << "answer: " << ( sum  / static_cast< float >( num_trials ) ) << std::endl;
    std::cout << "time: " << ( elapsed_time.count() / static_cast< float >( num_trials ) ) << " us" << std::endl;
    return 0;
}
