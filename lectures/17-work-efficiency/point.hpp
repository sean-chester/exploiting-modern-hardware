/**
 * Simple header-only library for basic operations on generic 2d points
 */

#ifndef CSC586C_POINT
#define CSC586C_POINT


/** A generic two-dimensional point, p = (p.x,p.y) */
template < typename T >
	struct point
	{
		T x;
		T y;
		T mag;
	};

/** Calculates the square of the distance of a point p to the origin O = (0,0) */
template < typename T >
    T distance_to_origin_squared( point< T > const p )
    {
        return p.x * p.x + p.y * p.y;
    }

/** Calculates the square of the L2 Euclidean distance between two points */
template < typename T >
	T l2_distance_squared( point< T > const p1, point< T > const p2 )
	{
		return distance_to_origin_squared( point< T >{ p1.x - p2.x, p1.y - p2.y } );
	}

/** Determines whether p1 and p2 have an L2 Euclidean distance within a given range (inclusive) */
template < typename T >
	bool within_range( point< T > const p1, point< T > const p2, T const range )
	{
		// comparing squares is cheaper than computing a square root. also avoids type conversion
		return l2_distance_squared( p1, p2 ) <= range * range;
	}

/** Return true if two points are co-located */
template < typename T >
	bool inline operator == ( point< T > const p1, point< T > const p2 )
	{
		return p1.x == p2.x
		    && p1.y == p2.y;
	}

/**
 * Comparator functor that returns true if the first point p1 is closer to the origin
 * than the second point, p2.
 */
struct sort_by_l2_to_O
{
    template < typename T >
        bool operator () ( point< T > const p1, point< T > const p2 )
        {
            return p1.mag < p2.mag;
        }
};

#endif // CSC586C_POINT