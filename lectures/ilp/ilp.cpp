#include <iostream>
using namespace std;

#include <numeric>
#include <time.h>
#include "papi.h"

const size_t iterations = 8000000000;

template < typename T >
    T sequential( T const val )
    {
        T result = 0;

        for ( auto c = 0llu; c < iterations; c += 4){
            //  Every add depends on the previous add. No ILP is possible.
            result += val;
            result += val;
            result += val;
            result += val;
            // result += val;
            // result += val;
            // result += val;
            // result += val;
            // result += val;
            // result += val;
            // result += val;
            // result += val;
            // result += val;
            // result += val;
            // result += val;
            // result += val;
        }

        return result;
    }

template < typename T >
    T optimized(  T const a1, T const a2, T const a3, T const a4 )
    {
        auto const loop_size = 4u;
        T result[ loop_size ] = {};

        for ( auto c = 0lu; c < iterations; c += loop_size){
            //  4 independent adds. Up to 4 adds can be run in parallel.
            result[0] += a1;
            result[1] += a2;
            result[2] += a3;
            result[3] += a4;
            // result[4] += a;
            // result[5] += a;
            // result[6] += a;
            // result[7] += a;
            // result[8] += a;
            // result[9] += a;
            // result[10] += a;
            // result[11] += a;
            // result[12] += a;
            // result[13] += a;
            // result[14] += a;
            // result[15] += a;
        }

        return std::accumulate( result, result + loop_size, 0 );
    }

int main()
{
    clock_t start0 = clock();
    double sum0 = sequential( 2.0 );
    clock_t end0 = clock();
    cout << "sum = " << sum0 << endl;
    cout << "sequential time: " << (double)(end0 - start0) / CLOCKS_PER_SEC << endl;

    // clock_t start1 = clock();
    // double sum1 = optimized( 2.0, 1.0, 5.0, 0.0 );
    // clock_t end1 = clock();
    // cout << "sum = " << sum1 << endl;
    // cout << "optimized time:  " << (double)(end1 - start1) / CLOCKS_PER_SEC << endl;

}
