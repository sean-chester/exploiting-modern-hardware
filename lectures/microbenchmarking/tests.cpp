#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file
#include "catch.hpp"

#include "unique_elements.hpp"

TEST_CASE( "Vector of only one element", "[unique]" ) {
	uint32_t const elem = 5u;
	std::vector< uint32_t > one_elem_input{ elem };

    REQUIRE( elem == csc586::unique::map_based{} ( one_elem_input ) );
    REQUIRE( elem == csc586::unique::bit_based{} ( one_elem_input ) );
    REQUIRE( elem == csc586::unique::sort_based{}( one_elem_input ) );
}


TEST_CASE( "Vector of only one non-unique element", "[unique]" ) {
	uint32_t const elem = 5u;
	std::vector< uint32_t > two_elem_input{ 2 * elem, elem, 2 * elem };

    REQUIRE( elem == csc586::unique::map_based{} ( two_elem_input ) );
    REQUIRE( elem == csc586::unique::bit_based{} ( two_elem_input ) );
    REQUIRE( elem == csc586::unique::sort_based{}( two_elem_input ) );
}


TEST_CASE( "Vector contains a triplet", "[unique]" ) {
	uint32_t const elem = 5u;
	std::vector< uint32_t > triplet_input{ 2 * elem, elem, 2 * elem, 2 * elem };

    REQUIRE( elem == csc586::unique::map_based{} ( triplet_input ) );
    REQUIRE( elem == csc586::unique::bit_based{} ( triplet_input ) );
    REQUIRE( elem == csc586::unique::sort_based{}( triplet_input ) );
}
