/**
 * A small application to benchmark the performance of hand-built sort algorithms.
 */

#include <iostream>  // std::cout

#include "timing.hpp"
#include "data-generation.hpp"


struct sort
{
	template < typename T >
		T operator () ( std::vector< T > data ) const
		{
            /**
                YOUR SORT CODE GOES HERE
            **/
            
			return data.front();
		}
};


int main()
{
	auto num_tests  = 10000u;
	auto input_size = 1u << 8;

    // For random numbers, one must first seed the random number generator. This is the idiomatic
    // approach for the random number generator libraries that we have chosen.
    std::srand ( static_cast< uint32_t >( std::time(0) ) );

	auto const test_cases = csc586::benchmark::uniform_rand_vec_of_vec< uint32_t >( num_tests
                                                                                   , input_size );
	auto const run_time   = csc586::benchmark::benchmark( sort{}
                                                         , test_cases );

    std::cout << "Average time (us): " << run_time << std::endl;

	return 0;
}
